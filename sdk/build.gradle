import com.github.spotbugs.snom.SpotBugsTask

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'signing'
    id 'spotless.gradle-plugin'
    id 'org.sonarqube' version '3.4.0.2513'
    id 'com.dicedmelon.gradle.jacoco-android'
    id 'com.github.spotbugs'
    id 'maven-publish'
}

android {
    namespace 'dev.abd3lraouf.learn.sdk'
    compileSdk 33

    defaultConfig {
        minSdk 21
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

def signingKey = System.getenv("SIGNING_KEY")
def signingPassword = System.getenv("SIGNING_PASSWORD")

signing {
    if (signingKey != null && signingPassword != null && !signingKey.isEmpty() && !signingPassword.isEmpty()) {
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign configurations.archives
    } else {
        logger.warn('The signing key and password are null. This can be ignored if this is a pull request.')
    }
}

spotbugs {
    effort = 'max'
    reportLevel = 'high'
    ignoreFailures = true
}

tasks.withType(SpotBugsTask) {
    def taskName = name
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/${slashSeparated(taskName)}.html")
            stylesheet = 'fancy-hist.xsl'
        }
    }
}

static String slashSeparated(String s) {
    return s.replaceAll(/\B[A-Z]/) { '/' + it }.toLowerCase()
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/abd3lraouf/Semantic")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = 'dev.abd3lraouf.learn.Semantic'
            artifactId "$project.name"
            from components.findByName("all")
        }
    }
}

task comps {
    afterEvaluate {
        println("Components: " + components*.name)
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

apply from: "$rootDir/gradle/test.gradle"

defaultTasks 'spotlessApply', 'build'